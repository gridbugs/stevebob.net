// Generated by CoffeeScript 1.4.0
var $O4D, Object4D;

$O4D = function() {
  return new Object4D();
};

Object4D = (function() {

  function Object4D() {
    this.points = [];
    this.edges = [];
    this.faces = [];
  }

  Object4D.prototype.applyMatrix = function(m) {
    var a, i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      a = m.multiply(this.points[i]);
      this.points[i].elements[0] = a.elements[0];
      this.points[i].elements[1] = a.elements[1];
      this.points[i].elements[2] = a.elements[2];
      _results.push(this.points[i].elements[3] = a.elements[3]);
    }
    return _results;
  };

  Object4D.prototype.moveW = function(x) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = this.points.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.points[i].elements[3] += x;
      _results.push(console.debug(this.points[i].elements[3]));
    }
    return _results;
  };

  return Object4D;

})();

Object4D.unitHyperCube = function() {
  var hc, p;
  hc = $O4D();
  hc.points = [$V([1, -1, 1, 1]), $V([1, 1, 1, 1]), $V([-1, 1, 1, 1]), $V([-1, -1, 1, 1]), $V([1, -1, -1, 1]), $V([1, 1, -1, 1]), $V([-1, 1, -1, 1]), $V([-1, -1, -1, 1]), $V([1, -1, 1, -1]), $V([1, 1, 1, -1]), $V([-1, 1, 1, -1]), $V([-1, -1, 1, -1]), $V([1, -1, -1, -1]), $V([1, 1, -1, -1]), $V([-1, 1, -1, -1]), $V([-1, -1, -1, -1])];
  p = hc.points;
  hc.edges = [$LS4D(p[0], p[1]), $LS4D(p[1], p[2]), $LS4D(p[2], p[3]), $LS4D(p[3], p[0]), $LS4D(p[4], p[5]), $LS4D(p[5], p[6]), $LS4D(p[6], p[7]), $LS4D(p[7], p[4]), $LS4D(p[0], p[4]), $LS4D(p[1], p[5]), $LS4D(p[2], p[6]), $LS4D(p[3], p[7]), $LS4D(p[8], p[9]), $LS4D(p[9], p[10]), $LS4D(p[10], p[11]), $LS4D(p[11], p[8]), $LS4D(p[12], p[13]), $LS4D(p[13], p[14]), $LS4D(p[14], p[15]), $LS4D(p[15], p[12]), $LS4D(p[8], p[12]), $LS4D(p[9], p[13]), $LS4D(p[10], p[14]), $LS4D(p[11], p[15]), $LS4D(p[0], p[8]), $LS4D(p[1], p[9]), $LS4D(p[2], p[10]), $LS4D(p[3], p[11]), $LS4D(p[4], p[12]), $LS4D(p[5], p[13]), $LS4D(p[6], p[14]), $LS4D(p[7], p[15])];
  hc.faces = [$P4D([p[0], p[1], p[9], p[8]]), $P4D([p[1], p[2], p[10], p[9]]), $P4D([p[2], p[3], p[11], p[10]]), $P4D([p[3], p[0], p[8], p[11]]), $P4D([p[4], p[5], p[13], p[12]]), $P4D([p[5], p[6], p[14], p[13]]), $P4D([p[6], p[7], p[15], p[14]]), $P4D([p[7], p[4], p[12], p[15]]), $P4D([p[0], p[4], p[12], p[8]]), $P4D([p[1], p[5], p[13], p[9]]), $P4D([p[2], p[6], p[14], p[10]]), $P4D([p[3], p[7], p[15], p[11]]), $P4D([p[0], p[1], p[2], p[3]]), $P4D([p[4], p[5], p[6], p[7]]), $P4D([p[0], p[1], p[5], p[4]]), $P4D([p[2], p[3], p[7], p[6]]), $P4D([p[1], p[2], p[6], p[5]]), $P4D([p[0], p[3], p[7], p[4]]), $P4D([p[8], p[9], p[10], p[11]]), $P4D([p[12], p[13], p[14], p[15]]), $P4D([p[8], p[9], p[13], p[12]]), $P4D([p[10], p[11], p[15], p[14]]), $P4D([p[9], p[10], p[14], p[13]]), $P4D([p[8], p[11], p[15], p[12]])];
  return hc;
};

Object4D.taperedHyperCube = function(start, end) {
  var hc, p;
  hc = $O4D();
  hc.points = [$V([start, -start, start, 1]), $V([start, start, start, 1]), $V([-start, start, start, 1]), $V([-start, -start, start, 1]), $V([start, -start, -start, 1]), $V([start, start, -start, 1]), $V([-start, start, -start, 1]), $V([-start, -start, -start, 1]), $V([end, -end, end, -1]), $V([end, end, end, -1]), $V([-end, end, end, -1]), $V([-end, -end, end, -1]), $V([end, -end, -end, -1]), $V([end, end, -end, -1]), $V([-end, end, -end, -1]), $V([-end, -end, -end, -1])];
  p = hc.points;
  hc.edges = [$LS4D(p[0], p[1]), $LS4D(p[1], p[2]), $LS4D(p[2], p[3]), $LS4D(p[3], p[0]), $LS4D(p[4], p[5]), $LS4D(p[5], p[6]), $LS4D(p[6], p[7]), $LS4D(p[7], p[4]), $LS4D(p[0], p[4]), $LS4D(p[1], p[5]), $LS4D(p[2], p[6]), $LS4D(p[3], p[7]), $LS4D(p[8], p[9]), $LS4D(p[9], p[10]), $LS4D(p[10], p[11]), $LS4D(p[11], p[8]), $LS4D(p[12], p[13]), $LS4D(p[13], p[14]), $LS4D(p[14], p[15]), $LS4D(p[15], p[12]), $LS4D(p[8], p[12]), $LS4D(p[9], p[13]), $LS4D(p[10], p[14]), $LS4D(p[11], p[15]), $LS4D(p[0], p[8]), $LS4D(p[1], p[9]), $LS4D(p[2], p[10]), $LS4D(p[3], p[11]), $LS4D(p[4], p[12]), $LS4D(p[5], p[13]), $LS4D(p[6], p[14]), $LS4D(p[7], p[15])];
  hc.faces = [$P4D([p[0], p[1], p[9], p[8]]), $P4D([p[1], p[2], p[10], p[9]]), $P4D([p[2], p[3], p[11], p[10]]), $P4D([p[3], p[0], p[8], p[11]]), $P4D([p[4], p[5], p[13], p[12]]), $P4D([p[5], p[6], p[14], p[13]]), $P4D([p[6], p[7], p[15], p[14]]), $P4D([p[7], p[4], p[12], p[15]]), $P4D([p[0], p[4], p[12], p[8]]), $P4D([p[1], p[5], p[13], p[9]]), $P4D([p[2], p[6], p[14], p[10]]), $P4D([p[3], p[7], p[15], p[11]]), $P4D([p[0], p[1], p[2], p[3]]), $P4D([p[4], p[5], p[6], p[7]]), $P4D([p[0], p[1], p[5], p[4]]), $P4D([p[2], p[3], p[7], p[6]]), $P4D([p[1], p[2], p[6], p[5]]), $P4D([p[0], p[3], p[7], p[4]]), $P4D([p[8], p[9], p[10], p[11]]), $P4D([p[12], p[13], p[14], p[15]]), $P4D([p[8], p[9], p[13], p[12]]), $P4D([p[10], p[11], p[15], p[14]]), $P4D([p[9], p[10], p[14], p[13]]), $P4D([p[8], p[11], p[15], p[12]])];
  return hc;
};
