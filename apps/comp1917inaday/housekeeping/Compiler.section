<h1>C Compiler</h1>
<h2>gcc</h2>
gcc (the GNU C Compiler) is what we will be using to compile our code. Linux users will already have it. Mac users will need to install X Code which is available from the Apple website. Once X Code is installed, gcc can be run from the command line.

To test if you have gcc installed, type gcc at the command line and press enter. If you get an error like &quot;bash: gcc: command not found&quot; then it's not installed, whereas if it says &quot;gcc: no input files&quot; then you're fine.

There are some options that should be used when compiling your C code with gcc. Options follow the command on the command line and are usually preppended with a '-'. When compiling code with gcc, your command line should look like this:

<pre class="code">steve$ gcc -Wall -Werror -O -o helloworld helloworld.c</pre>

What that all means:
gcc: the gnu c compiler
-Wall: show all warnings
-Werror: all warnings are treated as errors
-O: optimise &#45; do low level operations that increase the performance of the program when it is run
-o helloworld: produce a binary file as output named &quot;helloworld&quot;
helloworld.c: the file containing the c code (source code) for the program.

A <strong>warning</strong> is when the compiler finds something unusual in your code, but it is still capable of being compiled.

An <strong>error</strong> is when the compiler finds a mistake in your code which means that it cannot be compiled.

Why do we treat all warnings as errors?
Even though warnings don't mean your code is broken, when a warning is invoked it is likely that your code doesn't mean exactly what you think it means. Maybe you forgot something, maybe you used valid C syntax in an inappropriate way. Treating warnings as errors means that your code wont compile with warnings, and you have to deal with any problems early so you code is easier to debug.
