
function Matrix3D(aa, ab, ac, ad, 
                  ba, bb, bc, bd, 
                  ca, cb, cc, cd, 
                  da, db, dc, dd) {
    this.aa = aa;
    this.ab = ab;
    this.ac = ac;
    this.ad = ad;
    this.ba = ba;
    this.bb = bb;
    this.bc = bc;
    this.bd = bd;
    this.ca = ca;
    this.cb = cb;
    this.cc = cc;
    this.cd = cd;
    this.da = da;
    this.db = db;
    this.dc = dc;
    this.dd = dd;
    

    this.multiplyMatrix = function(m) {
        return new Matrix3D(
/* generated by perl:
@matrix = ();
foreach $i ("a".."d") {
    foreach $j ("a".."d") {
        @row = ();
        foreach $k ("a".."d") {
            push @row, "this.$i$k * m.$k$j"
        }
        push @matrix, join " + ", @row;
    }
}
print join ", \n", @matrix;
*/

this.aa * m.aa + this.ab * m.ba + this.ac * m.ca + this.ad * m.da, 
this.aa * m.ab + this.ab * m.bb + this.ac * m.cb + this.ad * m.db, 
this.aa * m.ac + this.ab * m.bc + this.ac * m.cc + this.ad * m.dc, 
this.aa * m.ad + this.ab * m.bd + this.ac * m.cd + this.ad * m.dd, 
this.ba * m.aa + this.bb * m.ba + this.bc * m.ca + this.bd * m.da, 
this.ba * m.ab + this.bb * m.bb + this.bc * m.cb + this.bd * m.db, 
this.ba * m.ac + this.bb * m.bc + this.bc * m.cc + this.bd * m.dc, 
this.ba * m.ad + this.bb * m.bd + this.bc * m.cd + this.bd * m.dd, 
this.ca * m.aa + this.cb * m.ba + this.cc * m.ca + this.cd * m.da, 
this.ca * m.ab + this.cb * m.bb + this.cc * m.cb + this.cd * m.db, 
this.ca * m.ac + this.cb * m.bc + this.cc * m.cc + this.cd * m.dc, 
this.ca * m.ad + this.cb * m.bd + this.cc * m.cd + this.cd * m.dd, 
this.da * m.aa + this.db * m.ba + this.dc * m.ca + this.dd * m.da, 
this.da * m.ab + this.db * m.bb + this.dc * m.cb + this.dd * m.db, 
this.da * m.ac + this.db * m.bc + this.dc * m.cc + this.dd * m.dc, 
this.da * m.ad + this.db * m.bd + this.dc * m.cd + this.dd * m.dd

        );        
    }



    this.multiplyScalar = function(s) {
        return new Matrix3D(
/* generated by perl:
@lines = ();
foreach $i ("a".."d") {
    @row = ();
    foreac@lines = ();
foreach $i ("a".."d") {
    @row = ();
    foreach $j ("a".."d") {
        push @row, "this.$i$j * v.$j";
    }
    push @lines, (join " + ", @row);
}
print join ", \n", @lines;
this.aa * v.a + this.ab * v.b + this.ac * v.c + this.ad * v.d, 
this.ba * v.a + this.bb * v.b + this.bc * v.c + this.bd * v.d, 
this.ca * v.a + this.cb * v.b + this.cc * v.c + this.cd * v.d, 
this.da * v.a + this.db * v.b + this.dc * v.c + this.dd * v.dh $j ("a".."d") {
        push @row, "this.$i$j * s";
    }
    push @lines, (join ", ", @row);
}
print join ", \n", @lines;
*/
this.aa * s, this.ab * s, this.ac * s, this.ad * s, 
this.ba * s, this.bb * s, this.bc * s, this.bd * s, 
this.ca * s, this.cb * s, this.cc * s, this.cd * s, 
this.da * s, this.db * s, this.dc * s, this.dd * s);

    }



    this.multiplyVector = function(v) {
        return new Vector3D(
/* generated by perl:
@lines = ();
foreach $i ("a".."d") {
    @row = ();
    foreach $j ("a".."d") {
        push @row, "this.$i$j * v.$j";
    }
    push @lines, (join " + ", @row);
}
print join ", \n", @lines;
*/
this.aa * v.a + this.ab * v.b + this.ac * v.c + this.ad * v.d, 
this.ba * v.a + this.bb * v.b + this.bc * v.c + this.bd * v.d, 
this.ca * v.a + this.cb * v.b + this.cc * v.c + this.cd * v.d, 
this.da * v.a + this.db * v.b + this.dc * v.c + this.dd * v.d
        );
    }


    this.transpose = function() {
        return new Matrix3D(
            
            this.aa, this.ba, this.ca, this.da,
            this.ab, this.bb, this.cb, this.db,
            this.ac, this.bc, this.cc, this.dc,
            this.ad, this.bd, this.cd, this.dd

        );
    }

    this.toString = function() {
        return [[this.aa, this.ab, this.ac, this.ad].join(", "),
               [this.ba, this.bb, this.bc, this.bd].join(", "),
               [this.ca, this.cb, this.cc, this.cd].join(", "),
               [this.da, this.db, this.dc, this.dd].join(", ")].join("\n");

    }

}

Matrix3D.identity = new Matrix3D(
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    );

Matrix3D.perspectiveTransform = function(depth) {
    return new Matrix3D(
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 0, 0,
        0, 0, 1/depth, 1
    );
}

Matrix3D.doPerspectiveTransform = function(depth, p3d) {
    var transformMatrix = Matrix3D.perspectiveTransform(depth);
    var result = transformMatrix.multiplyVector(p3d.toVector());
    var correctResult = result.multiplyScalar(1/result.d);
    return new Point2D(correctResult.a, correctResult.b);
}

Matrix3D.basisTransform = function(u, v, n, o) {
    return new Matrix3D(
        u.a, v.a, n.a, o.a,
        u.b, v.b, n.b, o.b,
        u.c, v.c, n.c, o.c,
        0, 0, 0, 1
    );
}

Matrix3D.viewingTransform = function(u, v, n, o) {
    return new Matrix3D(
        u.a, u.b, u.c, 0,
        v.a, v.b, v.c, 0,
        n.a, n.b, n.c, 0,
        0, 0, 0, 1
    ).multiplyMatrix(new Matrix3D(
        1, 0, 0, -o.a,
        0, 1, 0, -o.b,
        0, 0, 1, -o.c,
        0, 0, 0, 1
    ));
}

Matrix3D.rotateTransformX = function(theta) {
    return new Matrix3D(
        1, 0, 0, 0,
        0, Math.cos(theta), -Math.sin(theta), 0,
        0, Math.sin(theta), Math.cos(theta), 0,
        0, 0, 0, 1
    );
}

Matrix3D.rotateTransformY = function(theta) {
    return new Matrix3D(
        Math.cos(theta), 0, Math.sin(theta), 0,
        0, 1, 0, 0,
        -Math.sin(theta), 0, Math.cos(theta), 0,
        0, 0, 0, 1
    );
}

Matrix3D.rotateTransformZ = function(theta) {
    return new Matrix3D(
        Math.cos(theta), -Math.sin(theta), 0, 0,
        Math.sin(theta), Math.cos(theta), 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    );
}

Matrix3D.translateTransform = function(x, y, z) {
    return new Matrix3D(
        1, 0, 0, x,
        0, 1, 0, y,
        0, 0, 1, z,
        0, 0, 0, 1
    );
}

Matrix3D.scaleTransform = function(x, y, z) {
    return new Matrix3D(
        x, 0, 0, 0,
        0, y, 0, 0,
        0, 0, z, 0,
        0, 0, 0, 1
    );
}



