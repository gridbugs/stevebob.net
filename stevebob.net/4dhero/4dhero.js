// Generated by CoffeeScript 1.4.0
var Hero4D, len, project;

project = function(a, b) {
  var len;
  len = b.modulus();
  return b.multiply(a.dot(b) / (len * len));
};

len = function(v) {
  var dist, x, y;
  x = v.elements[0];
  y = v.elements[1];
  return dist = Math.sqrt(x * x + y * y);
};

Hero4D = (function() {

  function Hero4D(boundary, count, maxHeros, maxVillains) {
    var b, c, maxh, maxv, _i, _j, _k, _ref, _ref1, _ref2, _results, _results1, _results2;
    this.boundary = boundary;
    this.count = count;
    this.maxHeros = maxHeros;
    this.maxVillains = maxVillains;
    b = this.boundary;
    this.vectors = (function() {
      _results = [];
      for (var _i = 0, _ref = this.count - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      return $V([0, 1, 2, 3].map(function(j) {
        return Math.random() * b * 2 - b;
      }));
    });
    maxv = this.maxVillains;
    maxh = this.maxHeros;
    c = this.count;
    this.heros = (function() {
      _results1 = [];
      for (var _j = 0, _ref1 = this.count - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; 0 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).map(function(i) {
      var h;
      h = i;
      while (h === i) {
        h = Math.floor(Math.random() * maxh);
      }
      return h;
    });
    this.villains = (function() {
      _results2 = [];
      for (var _k = 0, _ref2 = this.count - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; 0 <= _ref2 ? _k++ : _k--){ _results2.push(_k); }
      return _results2;
    }).apply(this).map(function(i) {
      var v;
      v = i;
      while (v === i) {
        v = c - 1 - Math.floor(Math.random() * maxv);
      }
      return v;
    });
  }

  Hero4D.prototype.progress = function() {
    var h, i, next, p, v, _i, _j, _ref, _ref1, _results, _results1;
    h = this.heros;
    v = this.villains;
    p = this.vectors;
    next = (function() {
      _results = [];
      for (var _i = 0, _ref = this.vectors.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      var closest, destination, firstNonZero, hi, idxNonZero, j, pi, towards, vi, x;
      hi = p[h[i]];
      vi = p[v[i]];
      pi = p[i];
      closest = project(pi.subtract(vi), hi.subtract(vi)).add(vi);
      firstNonZero = 0;
      idxNonZero = 0;
      j = 0;
      while (firstNonZero === 0 && j < vi.elements.length) {
        firstNonZero = vi.elements[j];
        idxNonZero = j;
        j++;
      }
      if (firstNonZero === 0) {
        return pi;
      }
      x = (closest.elements[idxNonZero] - vi.elements[idxNonZero]) / (hi.elements[idxNonZero] - vi.elements[idxNonZero]);
      destination = closest;
      if (x < 1) {
        destination = hi;
      }
      if ((destination.distanceFrom(pi)) < 0.1) {
        return pi;
      }
      towards = (destination.subtract(pi)).toUnitVector().multiply(0.1).add(pi);
      return towards;
    });
    _results1 = [];
    for (i = _j = 0, _ref1 = this.vectors.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results1.push(this.vectors[i] = next[i]);
    }
    return _results1;
  };

  Hero4D.prototype.toObject = function() {
    var o;
    o = new Object4D;
    o.points = this.vectors;
    return o;
  };

  return Hero4D;

})();
